class MyBaseWeapon : Weapon
{
	
	default
	{
		Weapon.WeaponScaleX 1.2;
	}
	
	//[Pop] Useful functions that may or may not be needed at some point
	action bool PressingZoom(){return player.cmd.buttons & BT_ZOOM;}
	action bool PressingFire(){return player.cmd.buttons & BT_ATTACK;}
    action bool PressingAltfire(){return player.cmd.buttons & BT_ALTATTACK;}
	action bool PressingReload(){return player.cmd.buttons & BT_RELOAD;}
	action bool PressingCrouch(){return player.cmd.buttons & BT_CROUCH;}
	
	action bool JustReleased(int which)
    {
        return !(player.cmd.buttons & which) && player.oldbuttons & which;
    }
	
	override void DoEffect() //creation of a function
    {
        super.DoEffect(); //make an effect at top
        let player = owner.player; //define variable "player" and set it to the owner of the item
        if (player && player.readyweapon) //if you are player and have weapon
        {
            player.WeaponState |= WF_WEAPONBOBBING; //create weapon bob
        }
    }
    action void PC_PlayLowAmmoSound(string ammoType, int lowAmmo, sound soundToPlay)
    {
        if((CountInv(ammoType) <= lowAmmo) /*do CVar Check if you want*/)
        {
            A_StartSound(soundToPlay, 69); //dummy channel that i dont think any mod is gonna use
        }
    }

	action void PC_WeaponRecoil(float pitchDelta, float angleDelta = 0)
	{
		double powerMod;
		
		if(CountInv("PowerStrength") > 0)
		{
			powerMod = 0.5;
		}
		else
		{
			powerMod = 1;
		}
		
        A_SetPitch(self.pitch - (pitchDelta * powerMod));
		A_SetAngle(self.angle + ((frandom(angleDelta, -angleDelta)) * powerMod));
	}

	bool pickedup;
	override Inventory CreateCopy(Actor other)
    {
		if(!pickedup)
		{
			let g = PC_GlobalVariables.Get();
			if(g) g.GameLevel++;
			pickedup = true;
		}
		return Super.CreateCopy(other);
	}
	
	action void PC_QuakeCamera(int qDur, float camRoll)
	{
		A_QuakeEx(0, 0, 0, qDur, 0, 100, "", 0, 1, 0, 0, 0, 0, (camRoll / 2), 1, 0, 0, 0);
		//[Pop] the following is a list of commonly used qDur and camRoll based on gun type, imo rocket based weapons shouldnt shake tho
		/*
		melee 3,5
		pistol calibers 2,1
		high power pistols 3,2
		shotguns standard 2,4
		big shotgun 3,6
		rifle caliber 2,3
		minigun stuff 2,2
		plasma 2,1
		rail 2,3
		BFG esque 3,5
		*/
		//also, camroll / 2, 2 should be made a scaling CVar at some point, or attach it to some other cvar
		//DONT FORGET DIPSHIT
	}
	
	//[Pop] Now we can condense some code down
	//gun proc isnt here cause that should be handled from whatever function is
	//written for spawning projectiles
	action void PC_PlayPowerModSounds()
	{
		If(CountInv("Power4xDamage") || CountInv("Chalicedamage"))
		{
			A_startsound("Weapons/quadfire", 5);
		}
		return;
	}
	
	//[Pop] Heres the aforementioned function thatll handle GunProc as well
	action void PC_FireBullets(string type,int amount,float angle,double offs,double height,float pitch)
	{
		for(int i=amount;i>0;i--)
		{
			A_FireProjectile(type,(frandom(angle,angle * -1)),0,offs,height,FPF_NOAUTOAIM,(frandom(pitch,pitch * -1)));
		}
		if(CountInv("Guntoken") && random(1,5) == 5)
		{
			A_startsound("Gun/Proc",999,0,1);
			for(int i=amount;i>0;i--)
			{
				A_FireProjectile(type,(frandom((angle) * 2,(angle * -1) * 2)),0,offs,height,FPF_NOAUTOAIM,(frandom((pitch) * 2,(pitch * -1) * 2)));
			}
		}
	}
}