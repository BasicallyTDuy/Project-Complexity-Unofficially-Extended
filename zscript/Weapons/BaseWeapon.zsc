class JustaWeapon : Weapon
{
	Default
	{
		Weapon.BobRangeX 0.3;
		Weapon.BobRangeY 0.5;
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobSpeed 2.4;
		+WEAPON.AMMO_OPTIONAL;
		+WEAPON.NOALERT;
		+WEAPON.NOAUTOFIRE;
		+WEAPON.NOAUTOAIM;
		+WEAPONSPAWN;
		Weapon.UpSound "Weapon/Select";
	}

	States
	{
		Spawn:
			TNT1 A -1;
			Loop;
		Ready:
			TNT1 A 1 A_WeaponReady;
			Loop;
		Deselect:
			TNT1 A 1 A_Lower;
			Wait;
		Select:
			TNT1 A 1 A_Raise;
			Loop;
		Fire:
			TNT1 A 1;
			Goto Ready;
		Kicking:
			KICK ABCD 1;
			KICK E 1
			{
				if(CountInv("Power4xDamage"))
				{
					A_StartSound("Weapon/quadfire",5,0);
				}
				if(CountInv("Chalicedamage"))
				{
					A_StartSound("Weapon/quadfire",5,0);
				}
			}
			KICK E 1 Offset(0,38)
				{
					if (countinv("Powerstrength")==1)
					{
					A_StartSound("Weapons/BKickswing",10,0);
						}
					else
						{
					A_StartSound("Weapons/Kickswing",10,0);
						}
					A_Recoil(-2);
				}
			KICK F 1 Offset(0,38);
			KICK G 1 Offset(0,38)
			{
				if (countinv("Powerstrength")==1)
				{
					A_CustomPunch (300, true, CPF_NOTURN, "BKickpuff", 120);
				}
				else
				{
					A_CustomPunch (60, true, CPF_NOTURN, "Kickpuff", 120);
				}
			}
			KICK H 6 Offset(0,32);
			KICK IG 1 Offset(0,32);
			KICK FED 1 Offset(0,38);
			KICK CBA 1 Offset(0,32);
			TNT1 A 1 A_ReFire;
			TNT1 A 1;
			TNT1 A 1 A_Jump(256,"ReturnState");
			Goto Ready;
		NadeThrow:
			GRHO ABC 1;
			GRTH ABCD 1;
			GRTH E 1 Offset(0,38) A_StartSound("Weapons/pinpull",9,0);
			GRTH FGHIJ 1 Offset(0,38);
			GRTH KLMN 1 Offset(0,32);
			TNT1 A 0 
			{
				A_FireCustomMissile("Bombpotats", 0, 1, 0, 0);
				if(CountInv("Power4xDamage"))
				{
					A_StartSound("Weapon/quadfire",5,0);
				}
				if(CountInv("Chalicedamage"))
				{
					A_StartSound("Weapon/quadfire",5,0);
				}
				A_StartSound("Weapons/grenadethrow",10,0);
				A_TakeInventory("HGammo",1);
			}
			GRTH OPQRSTU 1 Offset(0,32);
			TNT1 A 1 A_Jump(256,"Returnstate");
			Goto Ready;
		MineThrow:
			TNT1 A 4;
			MIN4 AB 1;
			MIN4 B 2;
			TNT1 A 0 A_StartSound("Weapons/MIB",31,0);
			MIN4 B 2;
			MIN4 BCD 1;
			TNT1 A 0 
			{
				if(CountInv("Power4xDamage"))
				{
					A_startsound("Weapon/quadfire",5,0);
				}
				if(CountInv("Chalicedamage"))
				{
					A_startsound("Weapon/quadfire",5,0);
				}
				A_startsound("Weapons/grenadethrow",10,0);
				A_FireCustomMissile("TossedMine",0,0,0,0);
			}
			MIN4 EFGHIJ 1;
			TNT1 A 0 A_Takeinventory("Mineammo",1);
			TNT1 A 4;
			TNT1 A 1 A_Jump(256,"Returnstate");
			Goto Ready;
	}

	//[Pop] Useful functions that may or may not be needed at some point
	action bool PressingZoom(){return player.cmd.buttons & BT_ZOOM;}
	action bool PressingFire(){return player.cmd.buttons & BT_ATTACK;}
	action bool PressingAltfire(){return player.cmd.buttons & BT_ALTATTACK;}
	action bool PressingReload(){return player.cmd.buttons & BT_RELOAD;}
	action bool PressingCrouch(){return player.cmd.buttons & BT_CROUCH;}
	
	action bool JustReleased(int which)
	{
		return !(player.cmd.buttons & which) && player.oldbuttons & which;
	}
	
	override void DoEffect() //creation of a function
	{
		super.DoEffect(); //make an effect at top
		let player = owner.player; //define variable "player" and set it to the owner of the item
		if (player && player.readyweapon) //if you are player and have weapon
		{
			player.WeaponState |= WF_WEAPONBOBBING; //create weapon bob
		}
		
		if(pc_ScaleXWeapons)
		{
			WeaponScaleX = 1.2;
		}
		else
		{
			WeaponScaleX = 1;
		}
	}
	action void PC_PlayLowAmmoSound(string ammoType, int lowAmmo, sound soundToPlay)
	{
		if((CountInv(ammoType) <= lowAmmo) /*do CVar Check if you want*/)
		{
			A_StartSound(soundToPlay, 69); //dummy channel that i dont think any mod is gonna use
		}
	}

	action void PC_WeaponRecoil(float pitchDelta, float angleDelta = 0)
	{
		double powerMod;
		
		if(CountInv("PowerStrength") > 0)
		{
			powerMod = 0.5;
		}
		else
		{
			powerMod = 1;
		}
		
		A_SetPitch(self.pitch - (pitchDelta * powerMod));
		A_SetAngle(self.angle + ((frandom(angleDelta, -angleDelta)) * powerMod));
	}

	bool pickedup;
	override Inventory CreateCopy(Actor other)
	{
		if(!pickedup)
		{
			let g = PC_GlobalVariables.Get();
			if(g) g.GameLevel++;
			pickedup = true;
		}
		return Super.CreateCopy(other);
	}

	action void PC_QuakeCamera(int qDur, float camRoll)
	{
		A_QuakeEx(0, 0, 0, qDur, 0, 100, "", QF_WAVE, 1, 0, 0, 0, 0, (camRoll / 2), 1, 0, 0, 0);
		//[Pop] the following is a list of commonly used qDur and camRoll based on gun type, imo rocket based weapons shouldnt shake tho
		/*
		melee 3,5
		pistol calibers 2,1
		high power pistols 3,2
		shotguns standard 2,4
		big shotgun 3,6
		rifle caliber 2,3
		minigun stuff 2,2
		plasma 2,1
		rail 2,3
		BFG esque 3,5
		*/
		//also, camroll / 2, 2 should be made a scaling CVar at some point, or attach it to some other cvar
		//DONT FORGET DIPSHIT
	}
	
	//[Pop] Now we can condense some code down
	//gun proc isnt here cause that should be handled from whatever function is
	//written for spawning projectiles
	action void PC_PlayPowerModSounds()
	{
		if(CountInv("Power4xDamage") || CountInv("Chalicedamage"))
		{
			A_startsound("Weapons/quadfire", 5);
		}
		return;
	}

	//[Pop] Heres the aforementioned function thatll handle GunProc as well
	action void PC_FireBullets(string type,int amount,float angle,double offs,double height,float pitch, string ammoclass, int ammocount, bool useammo)
	{
		for(int i=amount;i>0;i--)
		{
			A_FireProjectile(type,(frandom(angle,angle * -1)),0,offs,height,FPF_NOAUTOAIM,(frandom(pitch,pitch * -1)));
		}
		if(CountInv("Guntoken") && random(1,5) == 5)
		{
			A_startsound("Gun/Proc",999,0,1);
			for(int i=amount;i>0;i--)
			{
				A_FireProjectile(type,(frandom((angle) * 2,(angle * -1) * 2)),0,offs,height,FPF_NOAUTOAIM,(frandom((pitch) * 2,(pitch * -1) * 2)));
			}
		}
		
		if(CountInv("Ammotoken") && random(1,5) == 5) 
		{
			A_startsound("ammo/Proc",999,0,0.65);
		}
		else if(useammo)
		{
			A_Takeinventory(ammoclass,1,TIF_NOTAKEINFINITE);
		}
	}
}