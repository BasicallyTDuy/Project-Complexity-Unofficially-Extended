class doubletube : Ammo
{
	Default
	{
	  Inventory.Amount 0;
	  Inventory.MaxAmount 2;
	  Ammo.BackpackAmount 0;
	  Ammo.BackpackMaxAmount 2;
	  Inventory.Icon "SHELLS";
	  +INVENTORY.IGNORESKILL;
  }
}

class SSGSpawner : Actor
{
	Default
	{
		+FLOORCLIP;
	}
States
    {
    Spawn:
        TNT1 A 0 Nodelay
            {
                If (ACS_NamedExecuteWithResult("WeaponSwap",2) ==2)
                {
                  A_SpawnItemEx("BoxoShells", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL, 0, tid);
                  }
                Else
                  {
                  A_SpawnItemEx("JustaSSG", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL, 0, tid);
                  }
            }    
        Stop;
    }
}

class MapSSGSpawner : Actor
{
	Default
	{
		+FLOORCLIP;
	}
States
    {
    Spawn:
        TNT1 A 0 Nodelay
            {
                If (ACS_NamedExecuteWithResult("WeaponSwap",2) ==2)
                {
                  A_SpawnItemEx("BoxoShells", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL, 0, tid);
                  }
                Else
                  {
                  A_SpawnItemEx("JASSGspawner", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL, 0, tid);
                  }
            }    
        Stop;
    }
}

class JustaSSG : JustaWeapon
{
	Default
	{
		Weapon.AmmoType1 "doubletube";
		Weapon.AmmoUse1 0;
		Weapon.AmmoGive1 0;
		Weapon.AmmoType2 "Shells";
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive2 6;
		Weapon.slotnumber 3;
		Weapon.SelectionOrder 400;
		Weapon.SlotPriority 60;
		Inventory.AltHUDIcon "SGN2A0";
		Obituary "%k Realized that double-barrel shotguns tend to fuck things up.";
		Inventory.PickupSound "weapons/shellslide";
		Inventory.Pickupmessage "[3] - \c[brighterOrange]Double-barreled shotgun\c- acquired.";
		Tag "$PC_SSGTAG";
	}
	
	action void PC_FireSSG(bool both)
	{
		PC_PlayPowerModSounds();
		A_AlertMonsters();
		
		if(both)
		{
			A_startsound("weapons/SSGDfire",10,0);
			PC_FireBullets("PC_SSGProjectile", 18, 4, 0, 0, 4,"DoubleTube",2,1);
			PC_QuakeCamera(3,6);
			PC_GunSmoke(-1,3,3);
			PC_GunSmoke(1,3,3);
		}
		else
		{
			A_startsound("Weapons/SSGSFire",10,0);
			PC_FireBullets("PC_SSGProjectile", 9, 2, 0, 0, 2,"DoubleTube",1,1);
			PC_QuakeCamera(2,4);
			PC_GunSmoke(0,3,3);
		}
		
		//A_FireCustomMissile("GSSpawner",0,0,0,4);
		A_ZoomFactor(0.99,ZOOM_INSTANT);
		
		A_GunFlash();
	}
	
	States
	{
		Spawn:
			SGN2 A -1;
			Stop;
		Select:
			C0SU BC 1 A_WeaponReady(WRF_NOFIRE);
			C0ID A 1 A_WeaponReady(WRF_NOFIRE);
			Goto ready;
		Deselect:
			C0ID A 1;
			C0SU CB 1;
			TNT1 A 0 A_lower;
			wait;
		Ready:
			C0ID A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM|WRF_ALLOWUSER1|WRF_ALLOWUSER2);
			Loop;
		Dryfire:
			C0ID A 16 A_PlaySound("Weapons/MGSGEmpty");
			C0ID A 4 A_jumpifinventory("Shells",1,1);
			Goto Reload;
			C0ID A 1;
			Goto Ready;
		Fire:
			TNT1 A 0 A_JumpIfInventory("Doubletube",2,"FireBoth");
			TNT1 A 0 A_JumpIfInventory("Doubletube",1,"FireLeft");
			TNT1 A 0 A_JumpIfInventory("Shells",2,"Reload");
			Goto dryfire;
		FireBoth:
			C0ID B 2 A_startsound("Weapons/SSGTriggerPull",11);
			TNT1 A 0 A_Overlay(-2, "FlashFull");
			C0FF A 1 Bright
			{
				PC_FireSSG(true);
			}
			TNT1 A 0 A_JumpIf(GetCvar("Spooks_Norecoil")==1, "Followthrough");
			TNT1 A 0 PC_WeaponRecoil(6,6);
		Followthrough:
			C0FF B 1 Bright;
			C0FF C 1 A_ZoomFactor(0.997);
			C0FF D 1 A_ZoomFactor(1.0);
			C0FF EF 1;
			C0ID A 1;
			Goto Ready;
		Altfire:
			TNT1 A 0 A_JumpIfInventory("Doubletube",2,"FireRight");
			TNT1 A 0 A_JumpIfInventory("Doubletube",1,1);
			Goto dryfire;
		Fireleft:
			TNT1 A 0 A_startsound("Weapons/SSGTriggerPull",11);
			TNT1 A 0 A_Overlay(-2, "FlashLeft");
			C0FH B 1 BRIGHT
			{
				PC_FireSSG(false);
			}
			TNT1 A 0 A_JumpIf(GetCvar("Spooks_Norecoil")==1, "FTLeft");
			TNT1 A 0 PC_WeaponRecoil(4,4);
		FTLeft:
			C0FH C 1 A_ZoomFactor(0.999);
			C0FH D 1 A_ZoomFactor(1.0);
			C0FH E 1;
			C0ID A 1;
			Goto Ready;
		Fireright:
			TNT1 A 0 A_startsound("Weapons/SSGTriggerPull",11);
			TNT1 A 0 A_JumpIfInventory("Doubletube",1,1);
			Goto dryfire;
			TNT1 A 0 A_Overlay(-2, "FlashRight");
			C0FH A 1 bright
			{
				PC_FireSSG(false);
			}
			TNT1 A 0 A_JumpIf(GetCvar("Spooks_Norecoil")==1, "FTRight");
			TNT1 A 0 PC_WeaponRecoil(4,4);
		FTRight:
			C0FH C 1 A_ZoomFactor(0.999);
			C0FH D 1  A_ZoomFactor(1.0);
			C0FH E 1;
			C0ID A 1;
			Goto Ready;
		Reload:
			TNT1 A 0 A_Jumpifinventory("Doubletube",2,"Ready");
			TNT1 A 0 A_Jumpifinventory("Doubletube",1,"Reloadright");
			TNT1 A 0 A_Jumpifinventory("Shells",2,"Doublereload");
			C0ID A 1;
			Goto reloadright;
		Doublereload:
			C0RO ABCDEFG 1;
			C0RO H 4;
			C0RO IJ 1;
			C0RO K 1 A_startsound("Weapons/Sawedopen",9,0);
			C0RO LM 1;
			TNT1 AA 0 A_FireCustomMissile("SSGSSpawner",-6,0,-19,-20,-14);
			C0RO NOPQ 1;
			C0RO Q 4;
			C0RB ABCD 1;
			TNT1 A 0
				{
				A_startsound("Weapons/Shellslide",99,0);
				A_GiveInventory("Doubletube",2);
				A_TakeInventory("Shells",2,TIF_NOTAKEINFINITE);
				}
			C0RB EF 1;
			TNT1 A 6;
			C0RC A 1;
			TNT1 A 0 A_startsound("Weapons/Sawedclose",11,0);
			C0RC BCDE 1;
			C0RC F 4;
			C0RC GHI 1;
			C0ID A 1;
			Goto Ready;
		Reloadright:
			TNT1 A 0 A_Jumpifinventory("Shells",1,2);
			C0ID A 1;
			Goto Ready;
			C0HO BCDE 1;
			C0HO F 1 A_startsound("Weapons/Sawedopen",9,0);
			TNT1 A 0 A_FireCustomMissile("SSGSSpawner",-6,0,-19,-20,-14) ;
			C0HO GHI 1;
			C0HO I 8;
			C0HB A 1;
			TNT1 A 0
			{
				A_startsound("Weapons/shellslide",99,0);
				A_GiveInventory("Doubletube",1);
				A_TakeInventory("Shells",1,TIF_NOTAKEINFINITE);
			}
			C0HB BCDFE 1;
			TNT1 A 8;
			C0RC A 1;
			TNT1 A 0 A_startsound("Weapons/Sawedclose",11,0);
			C0RC BCDE 1;
			C0RC F 4;
			C0RC GHI 1;
			C0ID A 1;
			Goto Ready;
		User1:
			TNT1 A 0 A_JumpIfInventory("HGammo",1,1);
			Goto Ready;
			C0ID A 1;
			C0SU CB 1;
			Goto nadethrow;
		User2:
			TNT1 A 0 A_JumpIfInventory("Mineammo",1,1);
			Goto Ready;
			C0ID A 1;
			C0SU CB 1;
			Goto Minethrow;
		Returnstate:
			C0SU BC 1;
			C0ID A 1;
			Goto Ready;
		
		FlashFull:
			TNT1 A 0 NODELAY;
			C1MZ AB 1;
			Stop;
		FlashLeft:
			TNT1 A 0 NODELAY;
			C1MZ D 1;
			Stop;
		FlashRight:
			TNT1 A 0 NODELAY;
			C1MZ C 1;
			Stop;
	}
}