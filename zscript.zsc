version "4.11"

#include "ZScript/HUD.zsc"

#include "ZScript/gore/NashGoreCommon.zsc"
#include "ZScript/gore/NashGoreStatics.zsc"
#include "ZScript/gore/NashGoreHandler.zsc"
#include "ZScript/gore/NashGoreBlood.zsc"
#include "ZScript/gore/NashGoreBloodPlane.zsc"
#include "ZScript/gore/NashGoreGibs.zsc"
#include "ZScript/gore/NashGoreCrushedGibs.zsc"
#include "ZScript/gore/NashGoreSquishyGibs.zsc"
#include "ZScript/gore/NashGoreIceChunk.zsc"
#include "ZScript/gore/NashGoreLiquidBlood.zsc"
#include "ZScript/gore/NashGoreWallBlood.zsc"
#include "ZScript/gore/NashGoreActor.zsc"
#include "ZScript/gore/NashGoreMenu.zsc"

#include "ZScript/MathNMixins.zsc"

#include "ZScript/Cvarstuff.zsc"
#include "ZScript/ProgSpawner.zsc"

#include "ZScript/Mushroom.zsc"
#include "ZScript/Ripperstuff.zsc"
#include "ZScript/Firespawners.zsc"
#include "ZScript/Shieldspherestuff.zsc"
#include "ZScript/Resstuff.zsc"
#include "ZScript/PickupStuff.zsc"

#include "ZScript/Player/Player.zsc"

#include "ZScript/Casingbase.zsc"
#include "ZScript/Items/PCKeys.zc"

#include "ZScript/Monsters/BaseMonster.zsc"

//Put Weapons ZS here

#include "ZScript/Weapons/BaseWeapon.zsc"

#include "Zscript/Weapons/Projectiles/BulletProjectile.zsc"
#include "Zscript/Weapons/Projectiles/BulletDef.SmallCal.zsc"
#include "Zscript/Weapons/Projectiles/BulletDef.LargeCal.zsc"
#include "Zscript/Weapons/Projectiles/BulletDef.Shell.zsc"

#include "ZScript/Weapons/ThrownWeapons.zsc"

//1
#include "ZScript/Weapons/Slot1/Melee.zsc"
#include "ZScript/Weapons/Slot1/Sledge.zsc"
//#include "ZScript/Weapons/Slot1/C4.zsc"

//2
#include "ZScript/Weapons/Slot2/Pistol.zsc"
#include "ZScript/Weapons/Slot2/MachinePistol.zsc"
#include "ZScript/Weapons/Slot2/Revolver.zsc"
#include "ZScript/Weapons/Slot2/SMG.zsc"
#Include "ZScript/Weapons/Slot2/ExMagnum.zsc"

//3
#include "ZScript/Weapons/Slot3/Shotgun.zsc"
#include "ZScript/Weapons/Slot3/SSG.zsc"
#include "ZScript/Weapons/Slot3/ASG.zsc"
#include "ZScript/Weapons/Slot3/QSG.zsc"
#Include "ZScript/Weapons/Slot3/ExSG.zsc"
#Include "ZScript/Weapons/Slot3/ExSSG.zsc"
#Include "ZScript/Weapons/Slot3/ExRevolver.zsc"

//4
#include "ZScript/Weapons/Slot4/Rifle.zsc"
#include "ZScript/Weapons/Slot4/BattleRifle.zsc"

//5
#include "ZScript/Weapons/Slot5/Minigun.zsc"
#include "ZScript/Weapons/Slot5/Explosiverifle.zsc"

//6
#include "ZScript/Weapons/Slot6/PipebombLauncher.zsc"
#include "ZScript/Weapons/Slot6/GL.zsc"
#include "ZScript/Weapons/Slot6/RL.zsc"

//7
#include "ZScript/Weapons/Slot7/DemonTechRifle.zsc"
#include "ZScript/Weapons/Slot7/PlasmaRifle.zsc"

//8
#include "ZScript/Weapons/Slot8/Railgun.zsc"

//9
#include "ZScript/Weapons/Slot9/BFG9k.zsc"
#include "ZScript/Weapons/Slot9/Devastator.zsc"
#include "ZScript/Weapons/Slot9/DemonTechBFG.zsc"
#include "ZScript/Weapons/Slot9/HellstormBFG.zsc"
#include "ZScript/Weapons/Slot9/BFG10k.zsc"

// global constants
const STAT_NashGore_Gore = Thinker.STAT_USER + 1;

class PistolStartHandler : EventHandler
{
     //  We NEED to determine if the map was beaten
    int MapBeatenCounter;
    void StripAllPlayerInventory()
    {
        // MP-friendly version: iterate through all players
        for ( int i = 0; i < MAXPLAYERS; i++ )
        {
            if ( playeringame[i] )
            {
                PlayerPawn p = PlayerPawn(players[i].mo);
                p.ClearInventory();
                p.GiveDefaultInventory();
                p.health = p.Default.Health;
                // PlayerInfo also has a health value!
                players[i].health = p.Default.Health;
            }
        }
    }
    
    // previous approaches tried to detect player exiting a level
    // (switch, teleporter) which doesn't cover E1M8-style exits,
    // which can be detected. but AFAICT there is no way to detect
    // E2M8-style exits because level specials can't be accessed
    // from ZScript. hence we use this event, which because this is
    // a non-Static EventHandler, only runs when a player exits.
    override void WorldUnloaded(WorldEvent e)
    {
        MapBeatenCounter++; // Increment by one.
        // respect on/off cvar
        if ( !(CVar.FindCVar("Spooks_pistolstart").GetBool()) )
            return;
        StripAllPlayerInventory();
        MapBeatenCounter = 0; // If pistol start is enabled, we make stuff spawn vanilla.
    }
}

//PC_PlayLowAmmoSound("M14AmmoCounter", 3, "weapons/LowAmmo")

Class MyBaseMonster: Actor 
{
void A_WarpChase()
    {
    if(random(1,50) == 1)
        {
        let ch = random(0,1);
        A_SpawnItemEx("GenericRushGhost",flags:SXF_SETMASTER);
        for(int a = 0;a<=20;a++)
            {
            if(ch)
                A_Chase(null,null);
            else
                A_Wander();
            A_SpawnItemEx("GenericPhaseGhost",flags:SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSTENCILCOL);
            }
        }
    A_Chase();
    }
}

//Stuff for resurrecting stuff
Class Amonsterthatcanbuff : Actor
{

  override bool CanResurrect (Actor other, bool passive)
    {
    if(!passive)
        other.GiveInventory("Healthbonus",1); 
    return Super.CanResurrect(other,passive);
    }
}

Class Amonsterthatcanbuff2 : Actor
{

  override bool CanResurrect (Actor other, bool passive)
    {
    if(!passive)
        other.GiveInventory("WQStormbuff",1); 
    return Super.CanResurrect(other,passive);
    }
}

Class Amonsterthatcanbuff3 : Actor
{

  override bool CanResurrect (Actor other, bool passive)
    {
    if(!passive)
        other.GiveInventory("ISBStormbuff",1); 
    return Super.CanResurrect(other,passive);
    }
}

Class JustARandomSpawner : RandomSpawner
{
  override void Tick()
	{
	Actor.Tick();
	if(!tracer || (tracer.health <= 0 && (tracer.CurState.Tics == -1 || !tracer.CurState.NextState)))
		{self.A_BossDeath(); self.Destroy();}
	}
}